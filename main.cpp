#define SIN_PHI1 0.8660254037844387
#define DEFAULT_SEED 42u
#define DEFAULT_STREAM 23u

#include <chrono>
#include <ctime>
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <algorithm>
#include <random>
#include <math.h>
#include "pcg_random/pcg_random.hpp"
#include "dynamics.hpp"
#include "misc.hpp"

#include "experiment-trial_time_evolution.hpp"
#include "experiment-benchmark.hpp"
#include "experiment-chi_curves.hpp"

// PRINTER FUNCTIONS
/* print the state for each site to stdout */
void print_states(States &local_states);
/* print deltas for all sites */
void print_deltas(Deltas &local_deltas);
/* print transitions rates of every site */
void print_rates(Rates &local_rates);


void print_states(States &local_states) {
    for (uint16_t i = 0; i < N; i++) {
        std::cout << unsigned(local_states.array[i]) << ' ';
    }
    std::cout << "(" << local_states.pop[0] << ") "
              << "(" << local_states.pop[1] << ") "
              << "(" << local_states.pop[2] << ")\n";
}

void print_deltas(Deltas &local_deltas) {
    for (uint16_t i = 0; i < N; i++) {
        if (local_deltas[i] >= 0) {
            std::cout << '+' << local_deltas[i] << ' ';
        } else {
            std::cout << local_deltas[i] << ' ';
        }
    }
    int s = 0;
    for (int i = 0; i < N; i++) {
        s += local_deltas[i];
    }
    std::cout << " (sum=" << s << ")\n";
}

void print_rates(Rates &local_rates) {
    std::cout << std::setprecision(2) << std::fixed;
    for (uint16_t i = 0; i < N; i++) {
        std::cout << local_rates.array[i] << ' ';
    }
    std::cout << '\n';
}

int main(int argc, char** argv) {
    std::string help_message =
        "Usage: ./sim[...] [experiment] [args]\n"
        "Two experiments ara available:\n"
        "Trial Time Evolution: run a single trial for ITERS iterations and log its time evolution (fast)\n"
        "Chi Curve: run a sequence of batches, each at a different coupling strength. Each batch "
        "consists of TRIAL number of trials, each running for ITERS iterations.\n\n"
        "Parameters that can be used with no experiment at all:\n"
        "-h           print this help message\n"
        "--benchmark  run a benchmark for a single batch\n\n"
        "Parameters that can be used with TIRAL TIME EOLUTION and CHI CURVE:\n"
        "  --initial-condition [random/uniform]    sets how to initialize the states array\n\n"
        "TRIAL TIME EVOLUTION parameters\n"
        "Invoke this experiment with the flag -t\n"
        "--log-phases (bool)   [default false] if true, log all phases\n"
        "--log-interval (real) [default average of maximum and minimum rates]\n"
        "    minimum simulation time passed between two consecutive logs of the\n"
        "    phases. Ignored if --log-phases is false.\n"
        "-tc (real)            [default 2.0] coupling strength for trial\n"
        "-ts (uint)            [default " + std::to_string(DEFAULT_SEED) + "] trial seed\n"
        "-tr (uint)            [default " + std::to_string(DEFAULT_STREAM) + "] trial stream\n"
        "-ti (int)             [default 17*N*log(N)] number of iterations in trial\n"
        "-tb (int)             [default 3*N*log(N)] number of burn iterations in trial\n"
        "-tf (string)          [default autogenerated] trial file name\n\n"
        "CHI CURVE parameters\n"
        "Invoke this experiment with the flag -b\n"
        "-bs (real)   [default 1.0] initial coupling strength\n"
        "-be (real)   [default 3.6] final coupling strength\n"
        "-bn (int)    [default 20] number of points from initial to final coupling with linear interpolation\n"
        "-bt (int)    [default 400] number of trials per coupling value\n"
        "-bi (int)    [default 17*N*log(N)] number of iterations (after burn-in)\n"
        "-bb (int)    [default 3*N*log(N)] number of burn-in iterations\n"
        "-bf (string) batch file name\n";

    // Display help message
    if (
            cmdOptionExists(argv, argv+argc, "-h")
            || cmdOptionExists(argv, argv+argc, "--help")
        ) {
        std::cout << help_message;
        return 0;
    }

    std::cout << "Welcome, to Jurassick Park!\n";
    std::cout << "N=" << N << " K=" << K << " p=" << p
              << " topology_seed=" << TOPOLOGY_SEED << "\n\n";

    // RUN A TRIAL AND LOG IT TO A FILE
    if (cmdOptionExists(argv, argv+argc, "-t")) {
        Time_evolution expt(argc, argv);
        std::cout << "Logging trial to file: " << expt.get_filename() << '\n'
                  << "  Coupling: " << expt.get_coupling() << '\n'
                  << "  Seed: " << expt.get_seed() << '\n'
                  << "  Stream: " << expt.get_stream() << '\n'
                  << "  Iters: " << expt.get_iters() << '\n'
                  << "  Burn: " << expt.get_burn() << '\n'
                  << "  Initial condition: " << expt.get_ic() << '\n';
        expt.run();
    }

    // RUN A BATCH OF TRIALS FOR EACH COUPLING STRENGTH
    if (cmdOptionExists(argv, argv+argc, "-b")) {
        Chi_curves expb(argc, argv);
        std::cout << "Logging batch to file: " << expb.get_filename() << '\n'
                  << "  coupling_start: " << expb.get_coupling_start() << '\n'
                  << "  coupling_end: " << expb.get_coupling_end() << '\n'
                  << "  coupling_n: " << expb.get_num_batches() << '\n'
                  << "  trials: " << expb.get_trials() << '\n'
                  << "  iters: " << expb.get_iters() << '\n'
                  << "  burn: " << expb.get_burn() << '\n'
                  << "  initial condition: " << expb.get_ic() << '\n';
        if (expb.get_num_batches() < 1) {
            std::cout << "Argument for -bn must be greater than 1!\n";
            return 0;
        }
        expb.run();
    }

    // RUN A BENCHMARK
    if (cmdOptionExists(argv, argv+argc, "--benchmark")) {
        int runs = 20;
        Benchmark benchmark(runs);
        benchmark.run();
        double fastest = benchmark.fastest();
        double slowest = benchmark.slowest();
        double average = benchmark.average();
        std::cout << std::fixed << std::setprecision(6)
                  << "Benchmark results, best of " << runs << " runs.\n"
                  << "  iters: " << (int) 10*N*log(N) << "\n"
                  << "  Min: " << fastest << " s\n"
                  << "  Max: " << slowest << " s\n"
                  << "  Avg: " << average << " s\n";
    }

    return 0;
}
